from pydantic import BaseModel
from typing import Optional
from decimal import Decimal
import uuid

class BankAccountBase(BaseModel):
    account_name: str
    bank_name: str
    account_number: str
    current_balance: Decimal
    currency: str

class BankAccountCreate(BankAccountBase):
    pass

class BankAccountUpdate(BaseModel):
    account_name: Optional[str]
    bank_name: Optional[str]
    account_number: Optional[str]
    current_balance: Optional[Decimal]
    currency: Optional[str]

class BankAccountSchema(BankAccountBase):
    id: uuid.UUID

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional, List
from decimal import Decimal
import uuid

class ExpenseItemBase(BaseModel):
    item_name: str
    description: Optional[str]
    cost: Decimal

class ExpenseItemCreate(ExpenseItemBase):
    pass

class ExpenseItemUpdate(BaseModel):
    item_name: Optional[str]
    description: Optional[str]
    cost: Optional[Decimal]

class ExpenseItemSchema(ExpenseItemBase):
    id: uuid.UUID
    expense_id: uuid.UUID

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime
from decimal import Decimal
import uuid
from expenses_items import ExpenseItemCreate, ExpenseItem

class ExpenseBase(BaseModel):
    expense_date: Optional[datetime] = None
    description: Optional[str] = None
    due_date: Optional[datetime] = None
    total_cost: Decimal
    recipient_account: Optional[str] = None
    status: int
    provider_id: Optional[uuid.UUID] = None
    created_by: uuid.UUID
    approved_by: Optional[uuid.UUID] = None

class ExpenseCreate(ExpenseBase):
    items: List[ExpenseItemCreate]

class ExpenseUpdate(BaseModel):
    expense_date: Optional[datetime]
    description: Optional[str]
    due_date: Optional[datetime]
    total_cost: Optional[Decimal]
    recipient_account: Optional[str]
    status: Optional[int]
    provider_id: Optional[uuid.UUID]
    approved_by: Optional[uuid.UUID]
    items: Optional[List[ExpenseItemCreate]]

class ExpenseSchema(ExpenseBase):
    id: uuid.UUID
    items: List[ExpenseItem]

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime
from decimal import Decimal
import uuid
from expenses import Expense

class PaymentBase(BaseModel):
    payment_date: Optional[datetime] = None
    total_amount: Decimal
    status: int
    bank_account_id: Optional[uuid.UUID] = None
    created_by: uuid.UUID
    approved_by: Optional[uuid.UUID] = None
    executed_by: Optional[uuid.UUID] = None

class PaymentCreate(PaymentBase):
    expense_ids: List[uuid.UUID]

class PaymentUpdate(BaseModel):
    payment_date: Optional[datetime]
    total_amount: Optional[Decimal]
    status: Optional[int]
    bank_account_id: Optional[uuid.UUID]
    approved_by: Optional[uuid.UUID]
    executed_by: Optional[uuid.UUID]
    expense_ids: Optional[List[uuid.UUID]]

class PaymentSchema(BaseModel):
    id: uuid.UUID
    payment_date: Optional[datetime]
    total_amount: Decimal
    status: int
    bank_account_id: Optional[uuid.UUID]
    created_by: uuid.UUID
    approved_by: Optional[uuid.UUID]
    executed_by: Optional[uuid.UUID]
    expenses: List[Expense]

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional
import uuid

class ProviderBase(BaseModel):
    name: str
    phone: Optional[str] = None
    email: Optional[str] = None
    address: Optional[str] = None

class ProviderCreate(ProviderBase):
    pass

class ProviderUpdate(BaseModel):
    name: Optional[str]
    phone: Optional[str]
    email: Optional[str]
    address: Optional[str]

class ProviderSchema(ProviderBase):
    id: uuid.UUID

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional
import uuid

class RoleBase(BaseModel):
    name: str
    description: Optional[str] = None

class RoleCreate(RoleBase):
    pass

class RoleUpdate(BaseModel):
    name: Optional[str]
    description: Optional[str]

class RoleSchema(RoleBase):
    id: uuid.UUID

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional
import uuid

class UserRoleBase(BaseModel):
    user_id: uuid.UUID
    role_id: uuid.UUID

class UserRoleCreate(UserRoleBase):
    pass

class UserRoleUpdate(BaseModel):
    user_id: Optional[uuid.UUID]
    role_id: Optional[uuid.UUID]

class UserRoleSchema(UserRoleBase):
    id: uuid.UUID
    role_name: str
    role_description: Optional[str] = None

    class Config:
        orm_mode = True


from pydantic import BaseModel
from typing import Optional, List
from datetime import datetime
import uuid
from schemas.users_roles import UserRoleSchema

class UserBase(BaseModel):
    username: Optional[str] = None
    email: Optional[str] = None

class UserCreate(UserBase):
    password: str
    created_at: Optional[datetime] = None

class UserUpdate(BaseModel):
    username: Optional[str]
    email: Optional[str]
    password: Optional[str]

class UserSchema(UserBase):
    id: uuid.UUID
    created_at: Optional[datetime] = None
    user_roles: List[UserRoleSchema] = []

    class Config:
        orm_mode = True
